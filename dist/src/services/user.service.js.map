{"version":3,"sources":["../../../src/services/user.service.ts"],"sourcesContent":["import { prisma } from \"../database/database\";\r\nimport { HttpException } from \"../exceptions/httpException\";\r\n\r\nexport class UserService {\r\n    static async getByEmail(email: string){\r\n       const findUser = await prisma.user.findUnique(\r\n        { where: {email}, omit: {password:true}}\r\n        )\r\n       if(!findUser) throw new HttpException(404,'User not found')\r\n        return findUser\r\n    }\r\n\r\n    static async getById(id: number){\r\n        const findUser = await prisma.user.findUnique({ where: {id}})\r\n        if(!findUser) throw new HttpException(404, 'User not found')\r\n         return findUser\r\n     }\r\n    static async getAll(){\r\n        const users = await prisma.user.findMany({\r\n            omit: {password:true}\r\n        })\r\n        return users\r\n    }\r\n}"],"names":["UserService","getByEmail","email","findUser","prisma","user","findUnique","where","omit","password","HttpException","getById","id","getAll","users","findMany"],"mappings":";;;;+BAGaA;;;eAAAA;;;0BAHU;+BACO;AAEvB,IAAA,AAAMA,cAAN,MAAMA;IACT,aAAaC,WAAWC,KAAa,EAAC;QACnC,MAAMC,WAAW,MAAMC,gBAAM,CAACC,IAAI,CAACC,UAAU,CAC5C;YAAEC,OAAO;gBAACL;YAAK;YAAGM,MAAM;gBAACC,UAAS;YAAI;QAAC;QAExC,IAAG,CAACN,UAAU,MAAM,IAAIO,4BAAa,CAAC,KAAI;QACzC,OAAOP;IACX;IAEA,aAAaQ,QAAQC,EAAU,EAAC;QAC5B,MAAMT,WAAW,MAAMC,gBAAM,CAACC,IAAI,CAACC,UAAU,CAAC;YAAEC,OAAO;gBAACK;YAAE;QAAC;QAC3D,IAAG,CAACT,UAAU,MAAM,IAAIO,4BAAa,CAAC,KAAK;QAC1C,OAAOP;IACX;IACD,aAAaU,SAAQ;QACjB,MAAMC,QAAQ,MAAMV,gBAAM,CAACC,IAAI,CAACU,QAAQ,CAAC;YACrCP,MAAM;gBAACC,UAAS;YAAI;QACxB;QACA,OAAOK;IACX;AACJ"}