{"version":3,"sources":["../../../src/database/database.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client'\r\nimport { PrismaLibSQL } from '@prisma/adapter-libsql'\r\nimport { createClient } from '@libsql/client'\r\n\r\nexport const libsql = createClient({\r\n  url: `${process.env.TURSO_DATABASE_URL}`,\r\n  authToken: `${process.env.TURSO_AUTH_TOKEN}`,\r\n  //syncUrl: 'file:./dev.db'\r\n})\r\n\r\nexport const adapter = new PrismaLibSQL(libsql)\r\nexport const prisma = new PrismaClient({ adapter })\r\n\r\n/* \r\nexport const prisma = new PrismaClient({ adapter }).$extends({\r\n  query: {\r\n    $allModels: {\r\n      async $allOperations({ operation, model, args, query }) {\r\n        const result = await query(args)\r\n        \r\n        // Synchronize the embedded replica after any write operation\r\n        if (['create', 'update', 'delete'].includes(operation)) {\r\n          await libsql.sync()\r\n        }\r\n        \r\n        return result\r\n      }\r\n    }\r\n  }\r\n}) */"],"names":["adapter","libsql","prisma","createClient","url","process","env","TURSO_DATABASE_URL","authToken","TURSO_AUTH_TOKEN","PrismaLibSQL","PrismaClient"],"mappings":";;;;;;;;;;;IAUaA,OAAO;eAAPA;;IANAC,MAAM;eAANA;;IAOAC,MAAM;eAANA;;;wBAXgB;+BACA;yBACA;AAEtB,MAAMD,SAASE,IAAAA,qBAAY,EAAC;IACjCC,KAAK,GAAGC,QAAQC,GAAG,CAACC,kBAAkB,EAAE;IACxCC,WAAW,GAAGH,QAAQC,GAAG,CAACG,gBAAgB,EAAE;AAE9C;AAEO,MAAMT,UAAU,IAAIU,2BAAY,CAACT;AACjC,MAAMC,SAAS,IAAIS,oBAAY,CAAC;IAAEX;AAAQ"}